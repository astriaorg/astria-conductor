// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/execution/v1/execution.proto

package executionv1connect

import (
	context "context"
	errors "errors"
	v1 "github.com/bufbuild/buf-tour/gen/proto/execution/v1"
	connect_go "github.com/bufbuild/connect-go"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// ExecutionServiceName is the fully-qualified name of the ExecutionService service.
	ExecutionServiceName = "execution.v1.ExecutionService"
)

// ExecutionServiceClient is a client for the execution.v1.ExecutionService service.
type ExecutionServiceClient interface {
	DoBlock(context.Context, *connect_go.Request[v1.DoBlockRequest]) (*connect_go.Response[v1.DoBlockResponse], error)
}

// NewExecutionServiceClient constructs a client for the execution.v1.ExecutionService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewExecutionServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) ExecutionServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &executionServiceClient{
		doBlock: connect_go.NewClient[v1.DoBlockRequest, v1.DoBlockResponse](
			httpClient,
			baseURL+"/execution.v1.ExecutionService/DoBlock",
			opts...,
		),
	}
}

// executionServiceClient implements ExecutionServiceClient.
type executionServiceClient struct {
	doBlock *connect_go.Client[v1.DoBlockRequest, v1.DoBlockResponse]
}

// DoBlock calls execution.v1.ExecutionService.DoBlock.
func (c *executionServiceClient) DoBlock(ctx context.Context, req *connect_go.Request[v1.DoBlockRequest]) (*connect_go.Response[v1.DoBlockResponse], error) {
	return c.doBlock.CallUnary(ctx, req)
}

// ExecutionServiceHandler is an implementation of the execution.v1.ExecutionService service.
type ExecutionServiceHandler interface {
	DoBlock(context.Context, *connect_go.Request[v1.DoBlockRequest]) (*connect_go.Response[v1.DoBlockResponse], error)
}

// NewExecutionServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewExecutionServiceHandler(svc ExecutionServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/execution.v1.ExecutionService/DoBlock", connect_go.NewUnaryHandler(
		"/execution.v1.ExecutionService/DoBlock",
		svc.DoBlock,
		opts...,
	))
	return "/execution.v1.ExecutionService/", mux
}

// UnimplementedExecutionServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedExecutionServiceHandler struct{}

func (UnimplementedExecutionServiceHandler) DoBlock(context.Context, *connect_go.Request[v1.DoBlockRequest]) (*connect_go.Response[v1.DoBlockResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("execution.v1.ExecutionService.DoBlock is not implemented"))
}
